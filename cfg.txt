Terminals:
+ - * / % = ! > < ( ) [ ] " ' : , # variable number string str int float false none true and as break class continue def elif else for from if import in is not or pass raise return while with exception input len open print range
Variables:
S Assignment Input Bracket Type Term Arithmetic Operand Operator String Text Boolean Relation Print If Expression Elif Else For While List Element Function Return Module From Class Comment File With
Productions:
S -> S S | Assignment | Print | If | For | While | List | Function | Module | Class | Comment;
Assignment -> variable = Input | variable = File;
Input -> input Bracket | Type ( Input );
Bracket -> ( ) | ( Term );
Type -> str | int | float;
Term -> variable | Arithmetic | String | File | Term , Term;
Arithmetic -> Operand | Operand Operator Operand;
Operand -> number | variable | String;
Operator -> + | - | * | / | * * | / / | %;
String -> " Text " | ' Text ' | Text;
Text -> string | Text Text;
Boolean -> true | false | none | Term | not Term | Term and Term | Term or Term | Term is Boolean | Term in Term | Term Relation Term;
Relation -> > | < | > = | < = | = = | ! =;
Print -> print Bracket;
If -> if Expression | If Elif | If Else | If raise exception | If break | If pass | If continue;
Expression -> ( Boolean ) : S | Boolean : S ;
Elif -> elif Expression | Elif Elif | Elif Else;
Else -> else : S;
For -> for variable in variable : S | for variable in range Bracket : S;
While -> while Expression;
List -> [ ] | [ Element ];
Element -> Term | Element , Element;
Function -> def variable Bracket : S | Function Return;
Return -> return Boolean | return Term;
Module -> From import variable | From import variable as variable;
From -> from variable;
Class -> class variable : S;
Comment -> # Text;
File -> open Bracket;
With -> with File as variable : S